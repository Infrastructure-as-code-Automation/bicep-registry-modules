{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "9732866631658362245"
    },
    "name": "Azure Stack HCI Marketplace Gallery Image",
    "description": "This module deploys an Azure Stack HCI Marketplace Gallery Image."
  },
  "definitions": {
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the resource to create."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "customLocationResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required. The custom location ID."
      }
    },
    "osType": {
      "type": "string",
      "allowedValues": [
        "Windows",
        "Linux"
      ],
      "metadata": {
        "description": "Required. Operating system type that the gallery image uses."
      }
    },
    "identifier": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.AzureStackHCI/marketplaceGalleryImages@2025-04-01-preview#properties/properties/properties/identifier"
        },
        "description": "Required. The gallery image identifier configuration containing publisher, offer, and SKU."
      }
    },
    "hyperVGeneration": {
      "type": "string",
      "defaultValue": "V2",
      "allowedValues": [
        "V1",
        "V2"
      ],
      "metadata": {
        "description": "Optional. The hypervisor generation of the Virtual Machine."
      }
    },
    "cloudInitDataSource": {
      "type": "string",
      "nullable": true,
      "allowedValues": [
        "NoCloud",
        "Azure"
      ],
      "metadata": {
        "description": "Optional. Datasource for the gallery image when provisioning with cloud-init."
      }
    },
    "containerResourceId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Storage Container resourceId of the storage container to be used for marketplace gallery image."
      }
    },
    "version": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.AzureStackHCI/marketplaceGalleryImages@2025-04-01-preview#properties/properties/properties/version"
        },
        "description": "Required. Gallery image version configuration."
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.AzureStackHCI/marketplaceGalleryImages@2025-04-01-preview#properties/tags"
        },
        "description": "Optional. Tags for the marketplace gallery image."
      },
      "nullable": true
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "$fxv#0": "// ============== //\n//   Parameters   //\n// ============== //\n\n@description('Required. Name of the resource to create.')\nparam name string\n\n@description('Optional. Location for all Resources.')\nparam location string = resourceGroup().location\n\n@description('Required. The custom location ID.')\nparam customLocationResourceId string\n\n@description('Required. Operating system type that the gallery image uses.')\n@allowed([\n  'Windows'\n  'Linux'\n])\nparam osType string\n\n@description('Required. The gallery image identifier configuration of publisher.')\nparam publisher string\n\n@description('Required. The gallery image identifier configuration of offer.')\nparam offer string\n\n@description('Required. The gallery image identifier configuration of SKU.')\nparam sku string\n\n@description('Optional. The hypervisor generation of the Virtual Machine.')\n@allowed([\n  'V1'\n  'V2'\n])\nparam hyperVGeneration string = 'V2'\n\n@description('Optional. Datasource for the gallery image when provisioning with cloud-init.')\n@allowed([\n  'NoCloud'\n  'Azure'\n])\nparam cloudInitDataSource string?\n\n@description('Optional. Storage Container resourceId of the storage container to be used for marketplace gallery image.')\nparam containerResourceId string?\n\n@description('Required. Gallery image version name.')\nparam versionName string\n\n// ============== //\n//   Resources   //\n// ============== //\n\nresource marketplaceGalleryImage 'Microsoft.AzureStackHCI/marketplaceGalleryImages@2025-04-01-preview' = {\n  name: name\n  location: location\n  extendedLocation: {\n    name: customLocationResourceId\n    type: 'CustomLocation'\n  }\n  properties: {\n    cloudInitDataSource: cloudInitDataSource\n    containerId: containerResourceId\n    hyperVGeneration: hyperVGeneration\n    identifier: {\n      publisher: publisher\n      offer: offer\n      sku: sku\n    }\n    osType: osType\n    version: {\n      name: versionName\n    }\n  }\n}\n",
    "$fxv#1": "#!/bin/bash\n\nset -e  # Exit on any error\n\nsleep 400\n\n# exec >/dev/null 2>&1 # Redirect log to avoid ACI issue\n\necho \"Starting Marketplace Gallery Image deployment script...\"\n\n# Check required environment variables\nif [ -z \"$RESOURCE_GROUP_NAME\" ] || [ -z \"$SUBSCRIPTION_ID\" ] || [ -z \"$IMAGE_NAME\" ] || [ -z \"$IMAGE_LOCATION\" ] || [ -z \"$CUSTOM_LOCATION_RESOURCE_ID\" ] || [ -z \"$IMAGE_OS_TYPE\" ] || [ -z \"$IMAGE_PUBLISHER\" ] || [ -z \"$IMAGE_OFFER\" ] || [ -z \"$IMAGE_SKU\" ] || [ -z \"$IMAGE_HYPER_V_GENERATION\" ] || [ -z \"$IMAGE_CLOUD_INIT_DATA_SOURCE\" ] || [ -z \"$IMAGE_CONTAINER_RESOURCE_ID\" ] || [ -z \"$IMAGE_VERSION_NAME\" ] || [ -z \"$MARKETPLACE_GALLERY_IMAGE_BICEP_BASE64\" ]; then\n    echo \"Error: Required environment variables are missing\"\n    exit 0\nfi\n\nsleep 400\n\n# Set subscription context\necho \"Setting subscription context to: $SUBSCRIPTION_ID\"\naz account set --subscription \"$SUBSCRIPTION_ID\"\n\n# Create directory structure and decode base64 files\necho \"Creating required directory structure and bicep files...\"\n\n# Create nested directory\nmkdir -p nested\n\n# Decode and create marketplace-gallery-image.bicep file\necho \"Creating marketplace-gallery-image.bicep file from base64 encoded content...\"\necho \"$MARKETPLACE_GALLERY_IMAGE_BICEP_BASE64\" | base64 -d > nested/marketplace-gallery-image.bicep\n\n# Verify the files were created successfully\nif [ ! -f \"nested/marketplace-gallery-image.bicep\" ] || [ ! -s \"nested/marketplace-gallery-image.bicep\" ]; then\n    echo \"Error: Failed to create nested/marketplace-gallery-image.bicep file or file is empty\"\n    exit 0\nfi\n\necho \"✅ All bicep files created successfully\"\necho \"nested/marketplace-gallery-image.bicep size: $(wc -c < nested/marketplace-gallery-image.bicep) bytes\"\n\n# List current directory structure for debugging\necho \"Current directory structure:\"\nfind . -name \"*.bicep\" -type f\n\n# Create parameter file for deployment\nPARAM_FILE=\"deployment-params.json\"\n\n# Create a proper parameter file with JSON object\necho \"Creating parameter file...\"\njq -n \\\n  --arg name \"$IMAGE_NAME\" \\\n  --arg location \"$IMAGE_LOCATION\" \\\n  --arg customLocationResourceId \"$CUSTOM_LOCATION_RESOURCE_ID\" \\\n  --arg osType \"$IMAGE_OS_TYPE\" \\\n  --arg publisher \"$IMAGE_PUBLISHER\" \\\n  --arg offer \"$IMAGE_OFFER\" \\\n  --arg sku \"$IMAGE_SKU\" \\\n  --arg versionName \"$IMAGE_VERSION_NAME\" \\\n  --arg hyperVGeneration \"$IMAGE_HYPER_V_GENERATION\" \\\n  --arg cloudInitDataSource \"$IMAGE_CLOUD_INIT_DATA_SOURCE\" \\\n  --arg containerResourceId \"$IMAGE_CONTAINER_RESOURCE_ID\" \\\n  '{\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#\",\n    contentVersion: \"1.0.0.0\",\n    parameters: {\n      name: { value: $name },\n      location: { value: $location },\n      customLocationResourceId: { value: $customLocationResourceId },\n      osType: { value: $osType },\n      publisher: { value: $publisher },\n      offer: { value: $offer },\n      sku: { value: $sku },\n      versionName: { value: $versionName }\n    }\n  }\n  |\n  (if ($hyperVGeneration != \"\" and $hyperVGeneration != \"_null_\") then .parameters.hyperVGeneration = { value: $hyperVGeneration } else . end)\n  |\n  (if ($cloudInitDataSource != \"\" and $cloudInitDataSource != \"_null_\") then .parameters.cloudInitDataSource = { value: $cloudInitDataSource } else . end)\n  |\n  (if ($containerResourceId != \"\" and $containerResourceId != \"_null_\") then .parameters.containerResourceId = { value: $containerResourceId } else . end)\n  ' > \"$PARAM_FILE\"\n\n# Validate the parameter file\necho \"Validating parameter file...\"\nif ! jq empty \"$PARAM_FILE\" 2>/dev/null; then\n    echo \"Error: Generated parameter file is not valid JSON\"\n    cat \"$PARAM_FILE\"\n    exit 0\nfi\n\necho \"✅ Parameter file created and validated successfully\"\n\nsleep 400\n\n# Print parameter file content for debugging\necho \"============================================\"\necho \"Parameter file content:\"\necho \"============================================\"\ncat \"$PARAM_FILE\" | jq '.'\necho \"============================================\"\n\n# Check if marketplace gallery image resource exists\necho \"Checking if marketplace gallery image resource already exists...\"\n\n# Construct the resource ID for marketplace gallery image\nMARKETPLACE_GALLERY_IMAGE_RESOURCE_ID=\"/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME/providers/microsoft.azurestackhci/marketplaceGalleryImages/$IMAGE_NAME\"\n\necho \"Checking resource: $MARKETPLACE_GALLERY_IMAGE_RESOURCE_ID\"\n\n# Check if the marketplace gallery image resource exists\n# Redirect both stdout and stderr to suppress all output, only check exit code\nif az resource show --ids \"$MARKETPLACE_GALLERY_IMAGE_RESOURCE_ID\" >/dev/null 2>&1; then\n    echo \"✅ Marketplace gallery image resource already exists. Checking status...\"\n\n    # Get the provisioning state and deployment mode\n    PROVISIONING_STATE=$(az resource show --ids \"$MARKETPLACE_GALLERY_IMAGE_RESOURCE_ID\" --query \"properties.provisioningState\" --output tsv 2>/dev/null)\n\n    echo \"Resource ID: $MARKETPLACE_GALLERY_IMAGE_RESOURCE_ID\"\n    echo \"Provisioning State: $PROVISIONING_STATE\"\n\n    if [ \"$PROVISIONING_STATE\" = \"Succeeded\" ]; then\n        echo \"✅ Deployment resource is in successful state. Skipping deployment.\"\n        exit 0\n    else\n        echo \"❌ Deployment resource exists but is not in successful state!\"\n        echo \"Expected: Succeeded, Actual: $PROVISIONING_STATE\"\n\n        # Show resource details for debugging\n        echo \"Resource details:\"\n        az resource show --ids \"$MARKETPLACE_GALLERY_IMAGE_RESOURCE_ID\" --query \"{name: name, provisioningState: properties.provisioningState, deploymentMode: properties.deploymentMode}\" --output table 2>/dev/null || echo \"Could not retrieve resource details\"\n\n        exit 0\n    fi\nelse\n    echo \"📝 Marketplace gallery image resource does not exist. Proceeding with deployment...\"\nfi\n\n# Execute Bicep deployment\nDEPLOYMENT_NAME=\"image-deployment-$(date +%s)\"\n\necho \"Starting deployment: $DEPLOYMENT_NAME\"\necho \"Using template: nested/marketplace-gallery-image.bicep\"\necho \"Using parameter file: $PARAM_FILE\"\n\n# Check if nested/marketplace-gallery-image.bicep file was created successfully\nif [ ! -f \"nested/marketplace-gallery-image.bicep\" ]; then\n    echo \"Error: nested/marketplace-gallery-image.bicep file was not created successfully\"\n    echo \"Current directory contents:\"\n    ls -la\n    exit 0\nfi\n\nsleep 400\n\necho \"✅ nested/marketplace-gallery-image.bicep file found and ready for deployment\"\n\n# Execute deployment with parameter file\naz deployment group create \\\n    --resource-group \"$RESOURCE_GROUP_NAME\" \\\n    --name \"$DEPLOYMENT_NAME\" \\\n    --template-file \"nested/marketplace-gallery-image.bicep\" \\\n    --parameters \"@$PARAM_FILE\" \\\n    --verbose\n\nDEPLOYMENT_STATUS=$?\n\nif [ $DEPLOYMENT_STATUS -eq 0 ]; then\n    echo \"✅ Deployment completed successfully\"\n\n    # Get deployment outputs\n    echo \"Deployment outputs:\"\n    az deployment group show \\\n        --resource-group \"$RESOURCE_GROUP_NAME\" \\\n        --name \"$DEPLOYMENT_NAME\" \\\n        --query \"properties.outputs\" \\\n        --output table\nelse\n    echo \"❌ Deployment failed with status: $DEPLOYMENT_STATUS\"\n\n    # Get deployment error details\n    echo \"Deployment error details:\"\n    az deployment group show \\\n        --resource-group \"$RESOURCE_GROUP_NAME\" \\\n        --name \"$DEPLOYMENT_NAME\" \\\n        --query \"properties.error\" \\\n        --output json\n\n    # Also show the deployment operations for more details\n    echo \"Deployment operations:\"\n    az deployment operation group list \\\n        --resource-group \"$RESOURCE_GROUP_NAME\" \\\n        --name \"$DEPLOYMENT_NAME\" \\\n        --query \"[?properties.provisioningState=='Failed'].{operation: operationId, code: properties.statusCode, message: properties.statusMessage}\" \\\n        --output table\n\n    exit $DEPLOYMENT_STATUS\nfi\n\n# Clean up temporary files\nrm -f \"$PARAM_FILE\"\nrm -f \"nested/marketplace-gallery-image.bicep\"\n\necho \"Completed deployment\"\n\necho \"🎉 HCI deployment completed successfully!\"\n\n# Set output for Bicep usage\ncat > $AZ_SCRIPTS_OUTPUT_PATH << EOF\n{\n  \"status\": \"success\",\n  \"message\": \"Deployment completed successfully\",\n}\nEOF\n",
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
      "Azure Stack HCI Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'bda0d508-adf1-4af0-9c28-88919fc3ae06')]",
      "Windows Admin Center Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a6333a3e-0164-44c3-b281-7a577aff287f')]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[take(format('46d3xbcp.res.azurestackhci-markplgalleryimg.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4)), 64)]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "managedIdentity": {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2024-11-30",
      "name": "[format('temp-{0}', parameters('name'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    "roleAssignmentContributor": {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('temp-{0}', parameters('name'))), variables('builtInRoleNames').Contributor, resourceGroup().id)]",
      "properties": {
        "roleDefinitionId": "[variables('builtInRoleNames').Contributor]",
        "principalId": "[reference('managedIdentity').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "managedIdentity"
      ]
    },
    "roleAssignmentReader": {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('temp-{0}', parameters('name'))), variables('builtInRoleNames').Reader, resourceGroup().id)]",
      "properties": {
        "roleDefinitionId": "[variables('builtInRoleNames').Reader]",
        "principalId": "[reference('managedIdentity').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "managedIdentity"
      ]
    },
    "roleAssignmentRBACAdmin": {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('temp-{0}', parameters('name'))), variables('builtInRoleNames')['Role Based Access Control Administrator'], resourceGroup().id)]",
      "properties": {
        "roleDefinitionId": "[variables('builtInRoleNames')['Role Based Access Control Administrator']]",
        "principalId": "[reference('managedIdentity').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "managedIdentity"
      ]
    },
    "deploymentScript": {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "[format('img-deployment-script-{0}', uniqueString(resourceGroup().id))]",
      "location": "[resourceGroup().location]",
      "kind": "AzureCLI",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('temp-{0}', parameters('name'))))]": {}
        }
      },
      "properties": {
        "azCliVersion": "2.50.0",
        "timeout": "PT5H",
        "retentionInterval": "P1D",
        "cleanupPreference": "OnSuccess",
        "environmentVariables": [
          {
            "name": "RESOURCE_GROUP_NAME",
            "value": "[resourceGroup().name]"
          },
          {
            "name": "SUBSCRIPTION_ID",
            "value": "[subscription().subscriptionId]"
          },
          {
            "name": "IMAGE_NAME",
            "value": "[parameters('name')]"
          },
          {
            "name": "IMAGE_LOCATION",
            "value": "[coalesce(parameters('location'), resourceGroup().location)]"
          },
          {
            "name": "CUSTOM_LOCATION_RESOURCE_ID",
            "value": "[parameters('customLocationResourceId')]"
          },
          {
            "name": "IMAGE_OS_TYPE",
            "value": "[parameters('osType')]"
          },
          {
            "name": "IMAGE_PUBLISHER",
            "value": "[parameters('identifier').publisher]"
          },
          {
            "name": "IMAGE_OFFER",
            "value": "[parameters('identifier').offer]"
          },
          {
            "name": "IMAGE_SKU",
            "value": "[parameters('identifier').sku]"
          },
          {
            "name": "IMAGE_HYPER_V_GENERATION",
            "value": "[coalesce(parameters('hyperVGeneration'), '_null_')]"
          },
          {
            "name": "IMAGE_CLOUD_INIT_DATA_SOURCE",
            "value": "[coalesce(parameters('cloudInitDataSource'), '_null_')]"
          },
          {
            "name": "IMAGE_CONTAINER_RESOURCE_ID",
            "value": "[coalesce(parameters('containerResourceId'), '_null_')]"
          },
          {
            "name": "IMAGE_VERSION_NAME",
            "value": "[parameters('version').name]"
          },
          {
            "name": "MARKETPLACE_GALLERY_IMAGE_BICEP_BASE64",
            "value": "[base64(variables('$fxv#0'))]"
          }
        ],
        "scriptContent": "[variables('$fxv#1')]"
      },
      "dependsOn": [
        "managedIdentity",
        "roleAssignmentContributor",
        "roleAssignmentRBACAdmin",
        "roleAssignmentReader"
      ]
    },
    "marketplaceGalleryImage": {
      "existing": true,
      "type": "Microsoft.AzureStackHCI/marketplaceGalleryImages",
      "apiVersion": "2025-04-01-preview",
      "name": "[parameters('name')]",
      "dependsOn": [
        "deploymentScript"
      ]
    },
    "marketplaceGalleryImage_roleAssignments": {
      "copy": {
        "name": "marketplaceGalleryImage_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AzureStackHCI/marketplaceGalleryImages/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.AzureStackHCI/marketplaceGalleryImages', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "deploymentScript"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the marketplace gallery image."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the marketplace gallery image."
      },
      "value": "[resourceId('Microsoft.AzureStackHCI/marketplaceGalleryImages', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group of the marketplace gallery image."
      },
      "value": "[resourceGroup().name]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location of the marketplace gallery image."
      },
      "value": "[reference('marketplaceGalleryImage', '2025-04-01-preview', 'full').location]"
    }
  }
}